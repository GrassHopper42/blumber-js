// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique @db.VarChar(255)
  name     String? @db.VarChar(255)
  password String  @db.VarChar(255)

  posts Post[] @relation("author")
  // contributions Contribution[]
  // 
  // followers    Follow[]      @relation("follower")
  // following    Follow[]      @relation("following")
  // reacts       React[]
  // pullRequests PullRequest[]

  createdAt DateTime @default(now())

  @@map("users")
}

// generate Session model rely on @fastify/session
model Session {
  id      String   @id
  data    String
  expires DateTime

  @@map("sessions")
}

model Post {
  id     Int        @id @default(autoincrement())
  title  String
  status PostStatus @default(DRAFT)

  author   User @relation("author", fields: [authorId], references: [id])
  authorId Int

  postVersions PostVersion[]
  // discussions   Discussion[]
  // reacts        React[]
  // contributions Contribution[]

  createdAt DateTime @default(now())

  @@map("posts")
}

enum PostStatus {
  DRAFT
  BETA
  PUBLISHED

  @@map("post_status")
}

model PostVersion {
  content String
  version Int    @default(1)

  post   Post @relation(fields: [postId], references: [id])
  postId Int
  // pullRequests PullRequest[]

  createdAt DateTime @default(now())

  @@id([postId, version])
  @@map("post_versions")
}

// model PullRequest {
//   id String @id @default(uuid())
// 
//   title       String
//   description String?
//   status      Int     @default(0)
//   diff        String
// 
//   author   User @relation(fields: [authorId], references: [id])
//   authorId Int
// 
//   postVersion PostVersion @relation(fields: [postId, version], references: [postId, version])
//   postId      Int
//   version     Int
// 
//   comments Comment[]
// 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
// 
// model Contribution {
//   id String @id @default(uuid())
// 
//   contributor   User @relation(fields: [contributorId], references: [id])
//   contributorId Int
// 
//   post   Post @relation(fields: [postId], references: [id])
//   postId Int
// 
//   createdAt DateTime @default(now())
// }
// 
// model Discussion {
//   id      String @id @default(uuid())
//   content String
// 
//   post   Post @relation(fields: [postId], references: [id])
//   postId Int
// 
//   comments Comment[]
// 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
// 
// model Comment {
//   id      String @id @default(uuid())
//   content String
// 
//   pullRequest   PullRequest? @relation(fields: [pullRequestId], references: [id])
//   pullRequestId String?
//   Discussion    Discussion?  @relation(fields: [discussionId], references: [id])
//   discussionId  String?
// 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
// 
// model React {
//   reaction String
//   user     User   @relation(fields: [userId], references: [id])
//   userId   Int
//   post     Post   @relation(fields: [postId], references: [id])
//   postId   Int
// 
//   createdAt DateTime @default(now())
// 
//   @@id([userId, postId])
// }
// 
// model Follow {
//   follower   User @relation("following", fields: [followerId], references: [id])
//   followerId Int
// 
//   following   User @relation("follower", fields: [followingId], references: [id])
//   followingId Int
// 
//   createdAt DateTime @default(now())
// 
//   @@id([followerId, followingId])
// }
